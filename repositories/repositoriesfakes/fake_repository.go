// This file was generated by counterfeiter
package repositoriesfakes

import (
	"net/http"
	"sync"

	"github.com/pivotal-cf/cm-cli/models"
	"github.com/pivotal-cf/cm-cli/repositories"
)

type FakeRepository struct {
	SendRequestStub        func(request *http.Request, identifier string) (models.Item, error)
	sendRequestMutex       sync.RWMutex
	sendRequestArgsForCall []struct {
		request *http.Request
	}
	sendRequestReturns struct {
		result1 models.Item
		result2 error
	}
	invocations map[string][][]interface{}
}

func (fake *FakeRepository) SendRequest(request *http.Request, identifier string) (models.Item, error) {
	fake.sendRequestMutex.Lock()
	fake.sendRequestArgsForCall = append(fake.sendRequestArgsForCall, struct {
		request *http.Request
	}{request})
	fake.guard("SendRequest")
	fake.invocations["SendRequest"] = append(fake.invocations["SendRequest"], []interface{}{request})
	fake.sendRequestMutex.Unlock()
	if fake.SendRequestStub != nil {
		return fake.SendRequestStub(request, identifier)
	} else {
		return fake.sendRequestReturns.result1, fake.sendRequestReturns.result2
	}
}

func (fake *FakeRepository) SendRequestCallCount() int {
	fake.sendRequestMutex.RLock()
	defer fake.sendRequestMutex.RUnlock()
	return len(fake.sendRequestArgsForCall)
}

func (fake *FakeRepository) SendRequestArgsForCall(i int) *http.Request {
	fake.sendRequestMutex.RLock()
	defer fake.sendRequestMutex.RUnlock()
	return fake.sendRequestArgsForCall[i].request
}

func (fake *FakeRepository) SendRequestReturns(result1 models.Item, result2 error) {
	fake.SendRequestStub = nil
	fake.sendRequestReturns = struct {
		result1 models.Item
		result2 error
	}{result1, result2}
}

func (fake *FakeRepository) Invocations() map[string][][]interface{} {
	return fake.invocations
}

func (fake *FakeRepository) guard(key string) {
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
}

var _ repositories.Repository = new(FakeRepository)
